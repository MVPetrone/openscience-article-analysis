setwd(rstudioapi::getActiveDocumentContext()$path)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)
data_sharing_rates <- data %>%
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data_sharing_rates <- data %>%
group_by(Journal, `Is.there.data.shared.`) %>%
summarise(Count = n(), .groups = "drop") %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.there.data.shared.`))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
data_sharing_rates <- data %>%
group_by(Journal, `Is.there.data.shared.`) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.there.data.shared.`))
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Set the working directory
# Import the data from CSV
data <- read.csv("./data.csv")
# Calculate data sharing rates by journal
data_sharing_rates <- data %>%
group_by(Journal, `Is.there.data.shared.`) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.there.data.shared.`))
# Print the result
print(data_sharing_rates)
# Visualize the result with a stacked bar chart
ggplot(data_sharing_rates, aes(x = Journal, y = Proportion, fill = `Is.there.data.shared.`)) +
geom_bar(stat = "identity") +
labs(title = "Data Sharing Rates by Journal",
subtitle = "Proportion of Fully Shared, Partially Shared, and Not Shared Data",
x = "Journal",
y = "Proportion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = round(Proportion, 2)),
position = position_stack(vjust = 0.5),
color = "white",
size = 3)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
library(dplyr)  # Load the dplyr package for data manipulation
average_transparency <- data %>%
group_by(Journal) %>%
summarise(AvgTransparency = round(mean(Transparency.score..1.5.), 2))
print(average_transparency)
sorted_data <- average_transparency[order(average_transparency$AvgTransparency), ]
barplot(
sorted_data$AvgTransparency,
names.arg = sorted_data$Journal,
main = "Average Transparency Score by Journal",
xlab = "Journal",
ylab = "Average Transparency Score",
col = "steelblue",
las = 2,  # Rotate axis labels for readability
ylim = c(0, 5)  # Set the y-axis to range from 0 to 5
)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Set the working directory
# Import the data from CSV
data <- read.csv("./data.csv")
# Calculate data sharing rates by journal
data_sharing_rates <- data %>%
group_by(Journal, `Is.there.data.shared.`) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.there.data.shared.`))
# Print the result
print(data_sharing_rates)
# Visualize the result with a stacked bar chart
ggplot(data_sharing_rates, aes(x = Journal, y = Proportion, fill = `Is.there.data.shared.`)) +
geom_bar(stat = "identity") +
labs(title = "Data Sharing Rates by Journal",
subtitle = "Proportion of Fully Shared, Partially Shared, and Not Shared Data",
x = "Journal",
y = "Proportion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = round(Proportion, 2)),
position = position_stack(vjust = 0.5),
color = "white",
size = 3)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
data_sharing_rates <- data
group_by(Journal, `Is.there.data.shared.`) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.there.data.shared.`))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
data_sharing_rates <- data
group_by(Journal, `Is.there.data.shared.`)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
data_sharing_rates <- data %>%
group_by(Journal, `Is.there.data.shared.`)
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.there.data.shared.`))
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
data_sharing_rates <- data %>%
group_by(Journal, `Is.there.data.shared.`) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.there.data.shared.`))
# Print the result
print(data_sharing_rates)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(RColorBrewer)
# Process data to compute proportions per Journal and sharing status without NAs.
data_sharing_rates <- data %>%
filter(!is.na(`Is.there.data.shared.`)) %>%
group_by(Journal, `Is.there.data.shared.`) %>%
summarise(Count = n(), .groups = "drop") %>%
group_by(Journal) %>%
mutate(Proportion = Count / sum(Count)) %>%
ungroup()
# Reshape data into wide format using tidyr::pivot_wider.
data_wide <- data_sharing_rates %>%
pivot_wider(names_from = `Is.there.data.shared.`,
values_from = Proportion,
values_fill = list(Proportion = 0))
# Create a matrix for barplot (journals as rows).
data_matrix <- as.matrix(data_wide[,-1])
rownames(data_matrix) <- data_wide$Journal
# Define colors using RColorBrewer (Set2 palette).
cols <- brewer.pal(n = ncol(data_matrix), name = "Set2")
# Create the stacked bar chart.
mp <- barplot(
t(data_matrix),
beside = FALSE,
col = cols,
main = "Data Sharing Rates by Journal",
xlab = "Journal",
ylab = "Proportion",
las = 2,  # Rotate x-axis labels
legend.text = colnames(data_matrix),
args.legend = list(x = "top", horiz = TRUE, bty = "n", cex = 0.8)
)
# Add text labels for proportions within each stack.
for (i in seq_len(ncol(data_matrix))) {
cs <- cumsum(data_matrix[i, ])
starts <- c(0, head(cs, -1))
mids <- (starts + cs) / 2
for (j in seq_along(mids)) {
if (data_matrix[i, j] > 0) {
text(x = mp[i], y = mids[j],
labels = round(data_matrix[i, j], 2),
col = "white", cex = 0.8)
}
}
}
library(ggplot2)
ggplot(data_sharing_rates, aes(x = Journal, y = Proportion, fill = `Is.there.data.shared.`)) +
geom_bar(stat = "identity") +
labs(title = "Data Sharing Rates by Journal",
subtitle = "Proportion of Fully Shared, Partially Shared, and Not Shared Data",
x = "Journal",
y = "Proportion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = round(Proportion, 2)),
position = position_stack(vjust = 0.5),
color = "white",
size = 3)
# Assuming data_sharing_rates is a data frame with columns: Journal, Proportion, Is.there.data.shared.
# Reshape the data if necessary to have separate columns for each sharing status
# For example, if you have 'Fully Shared', 'Partially Shared', 'Not Shared' as levels in Is.there.data.shared.
# you might need to convert it to a wide format for stacked bars with base R.
# However, for a simple grouped bar plot, you can iterate through the levels.
# Get unique journals and sharing statuses
journals <- unique(data_sharing_rates$Journal)
sharing_status <- unique(data_sharing_rates$`Is.there.data.shared.`)
# Set up the plot area
par(mar = c(10, 4, 4, 2) + 0.1) # Adjust margins for x-axis labels
# Create a matrix for the bar plot.
# We'll need to reshape the data to a matrix where rows are sharing statuses
# and columns are journals.
# First, let's create a list of proportions for each journal
plot_data_list <- lapply(journals, function(j) {
sapply(sharing_status, function(s) {
subset_data <- data_sharing_rates[data_sharing_rates$Journal == j &
data_sharing_rates$`Is.there.data.shared.` == s, ]
if (nrow(subset_data) > 0) {
return(subset_data$Proportion)
} else {
return(0) # In case a combination doesn't exist
}
})
})
# Combine into a matrix
plot_matrix <- do.call(cbind, plot_data_list)
rownames(plot_matrix) <- sharing_status
colnames(plot_matrix) <- journals
# Define colors (similar to Set2 palette)
colors <- c("#8DA0CB", "#66C2A5", "#FC8D62") # Example colors similar to Set2
# Create the stacked bar plot
barplot(
plot_matrix,
beside = FALSE, # Stacked bars
col = colors[1:length(sharing_status)],
main = "Data Sharing Rates by Journal",
sub = "Proportion of Fully Shared, Partially Shared, and Not Shared Data",
xlab = "", # Will add journal names below
ylab = "Proportion",
ylim = c(0, 1), # Proportion goes from 0 to 1
names.arg = rep("", length(journals)), # Placeholder for x-axis labels
las = 2 # Rotate y-axis labels
)
# Add journal names to the x-axis with rotation
text(
x = seq_along(journals) * 1.2 - 0.5, # Adjust x-coordinate for label placement
y = -0.05, # Adjust y-coordinate to place below x-axis
labels = journals,
srt = 45, # Rotate labels by 45 degrees
adj = 1, # Right-align labels
xpd = TRUE, # Allow text to go outside plot area
cex = 0.8 # Adjust text size
)
# Add legend
legend(
"bottom",
legend = sharing_status,
fill = colors[1:length(sharing_status)],
title = "Is there data shared?",
bty = "n", # No box around legend
xpd = TRUE, # Allow legend to go outside plot area
inset = c(0, -0.25) # Adjust legend position
)
# Add text labels on the bars
for (i in 1:ncol(plot_matrix)) {
current_journal_data <- plot_matrix[, i]
cumulative_heights <- cumsum(current_journal_data)
for (j in 1:nrow(plot_matrix)) {
if (current_journal_data[j] > 0) {
text(
x = i * 1.2 - 0.5, # x-coordinate of the bar
y = cumulative_heights[j] - (current_journal_data[j] / 2), # Center of the bar segment
labels = round(current_journal_data[j], 2),
col = "white",
cex = 0.7
)
}
}
}
# Reset par settings to default if needed
# par(op)
library(ggplot2)
ggplot(data_sharing_rates, aes(x = Journal, y = Proportion, fill = `Is.there.data.shared.`)) +
geom_bar(stat = "identity") +
labs(title = "Data Sharing Rates by Journal",
subtitle = "Proportion of Fully Shared, Partially Shared, and Not Shared Data",
x = "Journal",
y = "Proportion") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = round(Proportion, 2)),
position = position_stack(vjust = 0.5),
color = "white",
size = 3)
library(ggplot2)
ggplot(data_sharing_rates, aes(x = Journal, y = Proportion * 100, fill = `Is.there.data.shared.`)) +
geom_bar(stat = "identity") +
labs(title = "Data Sharing Rates by Journal",
subtitle = "Percentage of Fully Shared, Partially Shared, and Not Shared Data",
x = "Journal",
y = "Percentage (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = round(Proportion * 100, 0)),
position = position_stack(vjust = 0.5),
color = "white",
size = 3)
library(ggplot2)
ggplot(data_sharing_rates, aes(x = Journal,
y = Proportion * 100,
fill = factor(`Is.there.data.shared.`,
levels = c("Not Shared", "Partially Shared", "Fully Shared")))) +
geom_bar(stat = "identity") +
labs(title = "Data Sharing Rates by Journal",
subtitle = "Percentage of Fully Shared, Partially Shared, and Not Shared Data",
x = "Journal",
y = "Percentage (%)",
fill = "Data Sharing Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = round(Proportion * 100, 0)),
position = position_stack(vjust = 0.5),
color = "white",
size = 3)
library(ggplot2)
ggplot(data_sharing_rates, aes(x = Journal, y = Proportion * 100, fill = `Is.there.data.shared.`)) +
geom_bar(stat = "identity") +
labs(title = "Data Sharing Rates by Journal",
subtitle = "Percentage of Fully Shared, Partially Shared, and Not Shared Data",
x = "Journal",
y = "Percentage (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
scale_fill_brewer(palette = "Set2") +
geom_text(aes(label = round(Proportion * 100, 0)),
position = position_stack(vjust = 0.5),
color = "white",
size = 3)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
code_sharing_rates <- data %>%
group_by(Journal, `Is.the.code.shared.`) %>%
summarise(Count = n()) %>%
mutate(Proportion = Count / sum(Count)) %>%
filter(!is.na(`Is.the.code.shared.`))
print(code_sharing_rates)
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
library(dplyr)
library(ggplot2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(scales)
library(knitr)
# Set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(scales)
library(knitr)
# Set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(scales)
library(knitr)
# Set the working directory
# Import the data from CSV
data <- read.csv("./data.csv")
# Calculate data sharing rates
data_sharing_summary <- data %>%
group_by(data_sharing_status) %>%
summarise(
count = n(),
.groups = 'drop'
) %>%
mutate(
percentage = (count / sum(count)) * 100,
rate = count / sum(count)
)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(scales)
library(knitr)
# Set the working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Import the data from CSV
data <- read.csv("./data.csv")
# Calculate data sharing rates
# Create a combined sharing status based on multiple columns
data_analysis <- data %>%
mutate(
# Create sharing category based on available columns
sharing_category = case_when(
Is.there.data.shared. == "Yes" &
!is.na(Data.accessibility.method) &
Data.accessibility.method != "" ~ "fully_shared",
Is.there.a.data.sharing.statement. == "Yes" &
(Is.there.data.shared. == "No" | is.na(Is.there.data.shared.)) ~ "statement_only",
Is.there.data.shared. == "No" ~ "not_shared",
TRUE ~ "unclear"
)
)
# Calculate summary statistics
data_sharing_summary <- data_analysis %>%
group_by(sharing_category) %>%
summarise(
count = n(),
.groups = 'drop'
) %>%
mutate(
percentage = (count / sum(count)) * 100,
rate = count / sum(count)
)
# Calculate specific rates
fully_shared_rate <- data_sharing_summary %>%
filter(sharing_category == "fully_shared") %>%
pull(rate)
statement_only_rate <- data_sharing_summary %>%
filter(sharing_category == "statement_only") %>%
pull(rate)
not_shared_rate <- data_sharing_summary %>%
filter(sharing_category == "not_shared") %>%
pull(rate)
# Additional analysis by data accessibility method
accessibility_summary <- data_analysis %>%
filter(Is.there.data.shared. == "Yes") %>%
group_by(Data.accessibility.method) %>%
summarise(
count = n(),
.groups = 'drop'
) %>%
mutate(
percentage = (count / sum(count)) * 100
) %>%
arrange(desc(count))
# Analysis by journal
journal_summary <- data_analysis %>%
group_by(Journal, sharing_category) %>%
summarise(
count = n(),
.groups = 'drop'
) %>%
group_by(Journal) %>%
mutate(
total_articles = sum(count),
percentage = (count / total_articles) * 100
) %>%
filter(sharing_category == "fully_shared") %>%
arrange(desc(percentage))
# Print the results
cat("Data Sharing Analysis Results:\n")
cat("=============================\n\n")
cat("Overall Summary Statistics:\n")
print(data_sharing_summary)
cat("\nKey Rates:\n")
cat(sprintf("Fully Shared Rate: %.2f%% (%.3f)\n",
fully_shared_rate * 100, fully_shared_rate))
cat(sprintf("Statement Only Rate: %.2f%% (%.3f)\n",
statement_only_rate * 100, statement_only_rate))
cat(sprintf("Not Shared Rate: %.2f%% (%.3f)\n",
not_shared_rate * 100, not_shared_rate))
# Calculate ratio of fully shared vs statement only
if (statement_only_rate > 0) {
sharing_ratio <- fully_shared_rate / statement_only_rate
cat(sprintf("\nRatio of Fully Shared to Statement Only: %.2f:1\n", sharing_ratio))
}
---
title: "1_journal_transparency"
knitr::opts_chunk$set(echo = FALSE)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- read.csv("./data.csv")
library(dplyr)
average_transparency <- data %>%
group_by(Journal) %>%
summarise(AvgTransparency = round(mean(Transparency.score..1.5.), 2))
print(average_transparency)
sorted_data <- average_transparency[order(average_transparency$AvgTransparency), ]
barplot(
sorted_data$AvgTransparency,
names.arg = sorted_data$Journal,
main = "Average Transparency Score by Journal",
xlab = "Journal",
ylab = "Average Transparency Score",
col = "steelblue",
las = 2,  # Rotate axis labels for readability
ylim = c(0, 5)  # Set the y-axis to range from 0 to 5
)
